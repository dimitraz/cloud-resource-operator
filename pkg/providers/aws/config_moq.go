// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package aws

import (
	"context"
	"github.com/integr8ly/cloud-resource-operator/pkg/providers"
	"sync"
)

var (
	lockConfigManagerInterfaceMockReadStorageStrategy sync.RWMutex
)

// Ensure, that ConfigManagerInterfaceMock does implement ConfigManagerInterface.
// If this is not the case, regenerate this file with moq.
var _ ConfigManagerInterface = &ConfigManagerInterfaceMock{}

// ConfigManagerInterfaceMock is a mock implementation of ConfigManagerInterface.
//
//     func TestSomethingThatUsesConfigManagerInterface(t *testing.T) {
//
//         // make and configure a mocked ConfigManagerInterface
//         mockedConfigManagerInterface := &ConfigManagerInterfaceMock{
//             ReadStorageStrategyFunc: func(ctx context.Context, rt providers.ResourceType, tier string) (*StrategyConfig, error) {
// 	               panic("mock out the ReadStorageStrategy method")
//             },
//         }
//
//         // use mockedConfigManagerInterface in code that requires ConfigManagerInterface
//         // and then make assertions.
//
//     }
type ConfigManagerInterfaceMock struct {
	// ReadStorageStrategyFunc mocks the ReadStorageStrategy method.
	ReadStorageStrategyFunc func(ctx context.Context, rt providers.ResourceType, tier string) (*StrategyConfig, error)

	// calls tracks calls to the methods.
	calls struct {
		// ReadStorageStrategy holds details about calls to the ReadStorageStrategy method.
		ReadStorageStrategy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Rt is the rt argument value.
			Rt providers.ResourceType
			// Tier is the tier argument value.
			Tier string
		}
	}
}

// ReadStorageStrategy calls ReadStorageStrategyFunc.
func (mock *ConfigManagerInterfaceMock) ReadStorageStrategy(ctx context.Context, rt providers.ResourceType, tier string) (*StrategyConfig, error) {
	if mock.ReadStorageStrategyFunc == nil {
		panic("ConfigManagerInterfaceMock.ReadStorageStrategyFunc: method is nil but ConfigManagerInterface.ReadStorageStrategy was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Rt   providers.ResourceType
		Tier string
	}{
		Ctx:  ctx,
		Rt:   rt,
		Tier: tier,
	}
	lockConfigManagerInterfaceMockReadStorageStrategy.Lock()
	mock.calls.ReadStorageStrategy = append(mock.calls.ReadStorageStrategy, callInfo)
	lockConfigManagerInterfaceMockReadStorageStrategy.Unlock()
	return mock.ReadStorageStrategyFunc(ctx, rt, tier)
}

// ReadStorageStrategyCalls gets all the calls that were made to ReadStorageStrategy.
// Check the length with:
//     len(mockedConfigManagerInterface.ReadStorageStrategyCalls())
func (mock *ConfigManagerInterfaceMock) ReadStorageStrategyCalls() []struct {
	Ctx  context.Context
	Rt   providers.ResourceType
	Tier string
} {
	var calls []struct {
		Ctx  context.Context
		Rt   providers.ResourceType
		Tier string
	}
	lockConfigManagerInterfaceMockReadStorageStrategy.RLock()
	calls = mock.calls.ReadStorageStrategy
	lockConfigManagerInterfaceMockReadStorageStrategy.RUnlock()
	return calls
}
