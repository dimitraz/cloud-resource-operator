// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package aws

import (
	"context"
	"github.com/openshift/cloud-credential-operator/pkg/apis/cloudcredential/v1"
	"sync"
)

var (
	lockCredentialManagerInterfaceMockReconcileBucketOwnerCredentials sync.RWMutex
	lockCredentialManagerInterfaceMockReconcileCredentials            sync.RWMutex
	lockCredentialManagerInterfaceMockReconcileProviderCredentials    sync.RWMutex
)

// Ensure, that CredentialManagerInterfaceMock does implement CredentialManagerInterface.
// If this is not the case, regenerate this file with moq.
var _ CredentialManagerInterface = &CredentialManagerInterfaceMock{}

// CredentialManagerInterfaceMock is a mock implementation of CredentialManagerInterface.
//
//     func TestSomethingThatUsesCredentialManagerInterface(t *testing.T) {
//
//         // make and configure a mocked CredentialManagerInterface
//         mockedCredentialManagerInterface := &CredentialManagerInterfaceMock{
//             ReconcileBucketOwnerCredentialsFunc: func(ctx context.Context, name string, ns string, bucket string) (*AWSCredentials, *v1.CredentialsRequest, error) {
// 	               panic("mock out the ReconcileBucketOwnerCredentials method")
//             },
//             ReconcileCredentialsFunc: func(ctx context.Context, name string, ns string, entries []v1.StatementEntry) (*v1.CredentialsRequest, *AWSCredentials, error) {
// 	               panic("mock out the ReconcileCredentials method")
//             },
//             ReconcileProviderCredentialsFunc: func(ctx context.Context, ns string) (*AWSCredentials, error) {
// 	               panic("mock out the ReconcileProviderCredentials method")
//             },
//         }
//
//         // use mockedCredentialManagerInterface in code that requires CredentialManagerInterface
//         // and then make assertions.
//
//     }
type CredentialManagerInterfaceMock struct {
	// ReconcileBucketOwnerCredentialsFunc mocks the ReconcileBucketOwnerCredentials method.
	ReconcileBucketOwnerCredentialsFunc func(ctx context.Context, name string, ns string, bucket string) (*AWSCredentials, *v1.CredentialsRequest, error)

	// ReconcileCredentialsFunc mocks the ReconcileCredentials method.
	ReconcileCredentialsFunc func(ctx context.Context, name string, ns string, entries []v1.StatementEntry) (*v1.CredentialsRequest, *AWSCredentials, error)

	// ReconcileProviderCredentialsFunc mocks the ReconcileProviderCredentials method.
	ReconcileProviderCredentialsFunc func(ctx context.Context, ns string) (*AWSCredentials, error)

	// calls tracks calls to the methods.
	calls struct {
		// ReconcileBucketOwnerCredentials holds details about calls to the ReconcileBucketOwnerCredentials method.
		ReconcileBucketOwnerCredentials []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Ns is the ns argument value.
			Ns string
			// Bucket is the bucket argument value.
			Bucket string
		}
		// ReconcileCredentials holds details about calls to the ReconcileCredentials method.
		ReconcileCredentials []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Ns is the ns argument value.
			Ns string
			// Entries is the entries argument value.
			Entries []v1.StatementEntry
		}
		// ReconcileProviderCredentials holds details about calls to the ReconcileProviderCredentials method.
		ReconcileProviderCredentials []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ns is the ns argument value.
			Ns string
		}
	}
}

// ReconcileBucketOwnerCredentials calls ReconcileBucketOwnerCredentialsFunc.
func (mock *CredentialManagerInterfaceMock) ReconcileBucketOwnerCredentials(ctx context.Context, name string, ns string, bucket string) (*AWSCredentials, *v1.CredentialsRequest, error) {
	if mock.ReconcileBucketOwnerCredentialsFunc == nil {
		panic("CredentialManagerInterfaceMock.ReconcileBucketOwnerCredentialsFunc: method is nil but CredentialManagerInterface.ReconcileBucketOwnerCredentials was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Name   string
		Ns     string
		Bucket string
	}{
		Ctx:    ctx,
		Name:   name,
		Ns:     ns,
		Bucket: bucket,
	}
	lockCredentialManagerInterfaceMockReconcileBucketOwnerCredentials.Lock()
	mock.calls.ReconcileBucketOwnerCredentials = append(mock.calls.ReconcileBucketOwnerCredentials, callInfo)
	lockCredentialManagerInterfaceMockReconcileBucketOwnerCredentials.Unlock()
	return mock.ReconcileBucketOwnerCredentialsFunc(ctx, name, ns, bucket)
}

// ReconcileBucketOwnerCredentialsCalls gets all the calls that were made to ReconcileBucketOwnerCredentials.
// Check the length with:
//     len(mockedCredentialManagerInterface.ReconcileBucketOwnerCredentialsCalls())
func (mock *CredentialManagerInterfaceMock) ReconcileBucketOwnerCredentialsCalls() []struct {
	Ctx    context.Context
	Name   string
	Ns     string
	Bucket string
} {
	var calls []struct {
		Ctx    context.Context
		Name   string
		Ns     string
		Bucket string
	}
	lockCredentialManagerInterfaceMockReconcileBucketOwnerCredentials.RLock()
	calls = mock.calls.ReconcileBucketOwnerCredentials
	lockCredentialManagerInterfaceMockReconcileBucketOwnerCredentials.RUnlock()
	return calls
}

// ReconcileCredentials calls ReconcileCredentialsFunc.
func (mock *CredentialManagerInterfaceMock) ReconcileCredentials(ctx context.Context, name string, ns string, entries []v1.StatementEntry) (*v1.CredentialsRequest, *AWSCredentials, error) {
	if mock.ReconcileCredentialsFunc == nil {
		panic("CredentialManagerInterfaceMock.ReconcileCredentialsFunc: method is nil but CredentialManagerInterface.ReconcileCredentials was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Ns      string
		Entries []v1.StatementEntry
	}{
		Ctx:     ctx,
		Name:    name,
		Ns:      ns,
		Entries: entries,
	}
	lockCredentialManagerInterfaceMockReconcileCredentials.Lock()
	mock.calls.ReconcileCredentials = append(mock.calls.ReconcileCredentials, callInfo)
	lockCredentialManagerInterfaceMockReconcileCredentials.Unlock()
	return mock.ReconcileCredentialsFunc(ctx, name, ns, entries)
}

// ReconcileCredentialsCalls gets all the calls that were made to ReconcileCredentials.
// Check the length with:
//     len(mockedCredentialManagerInterface.ReconcileCredentialsCalls())
func (mock *CredentialManagerInterfaceMock) ReconcileCredentialsCalls() []struct {
	Ctx     context.Context
	Name    string
	Ns      string
	Entries []v1.StatementEntry
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Ns      string
		Entries []v1.StatementEntry
	}
	lockCredentialManagerInterfaceMockReconcileCredentials.RLock()
	calls = mock.calls.ReconcileCredentials
	lockCredentialManagerInterfaceMockReconcileCredentials.RUnlock()
	return calls
}

// ReconcileProviderCredentials calls ReconcileProviderCredentialsFunc.
func (mock *CredentialManagerInterfaceMock) ReconcileProviderCredentials(ctx context.Context, ns string) (*AWSCredentials, error) {
	if mock.ReconcileProviderCredentialsFunc == nil {
		panic("CredentialManagerInterfaceMock.ReconcileProviderCredentialsFunc: method is nil but CredentialManagerInterface.ReconcileProviderCredentials was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ns  string
	}{
		Ctx: ctx,
		Ns:  ns,
	}
	lockCredentialManagerInterfaceMockReconcileProviderCredentials.Lock()
	mock.calls.ReconcileProviderCredentials = append(mock.calls.ReconcileProviderCredentials, callInfo)
	lockCredentialManagerInterfaceMockReconcileProviderCredentials.Unlock()
	return mock.ReconcileProviderCredentialsFunc(ctx, ns)
}

// ReconcileProviderCredentialsCalls gets all the calls that were made to ReconcileProviderCredentials.
// Check the length with:
//     len(mockedCredentialManagerInterface.ReconcileProviderCredentialsCalls())
func (mock *CredentialManagerInterfaceMock) ReconcileProviderCredentialsCalls() []struct {
	Ctx context.Context
	Ns  string
} {
	var calls []struct {
		Ctx context.Context
		Ns  string
	}
	lockCredentialManagerInterfaceMockReconcileProviderCredentials.RLock()
	calls = mock.calls.ReconcileProviderCredentials
	lockCredentialManagerInterfaceMockReconcileProviderCredentials.RUnlock()
	return calls
}
